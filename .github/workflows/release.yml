name: Release
on:
    schedule:
        - cron: "00 01 * * *"
    workflow_dispatch:

jobs:
    set-env-vars:
        runs-on: ubuntu-latest
        outputs:
            TAG: ${{ steps.generate-tag.outputs.tag }}
        steps:
            - name: Checkout sources
              uses: actions/checkout@v4
              with:
                  repository: "helix-editor/helix"
            - name: Get date
              run: echo "DATE=$(date +'%Y.%m.%d')" > $GITHUB_ENV
            - name: Generate Tag
              id: generate-tag
              run: |
                  export LATEST_REF=$(git rev-parse --short HEAD)
                  export TAG="$(echo ${DATE}-${LATEST_REF})"
                  echo $TAG
                  echo "TAG=$TAG" >> $GITHUB_ENV
                  echo "LATEST_REF=$LATEST_REF" >> $GITHUB_ENV
                  echo "tag=${TAG}" >> $GITHUB_OUTPUT
            - name: Echo TAG
              run: echo $TAG
            - name: Check if build is needed
              run: |
                  # Search for the latest release in this repository: if the name ends with $LATEST_REF, then we don't need to build.
                  latest_release=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.name')
                  if [[ $latest_release == *"${LATEST_REF}"* ]]; then
                    echo "No need to build, the latest release is $latest_release"
                    exit 1
                  fi
    fetch-grammars:
        name: Fetch Grammars
        runs-on: ubuntu-latest
        needs: [set-env-vars]
        steps:
            - name: Checkout sources
              uses: actions/checkout@v4
              with:
                  repository: "helix-editor/helix"

            - name: Install stable toolchain
              uses: dtolnay/rust-toolchain@stable

            - uses: Swatinem/rust-cache@v2

            - name: Fetch tree-sitter grammars
              run: cargo run --package=helix-loader --bin=hx-loader

            - name: Bundle grammars
              run: tar cJf grammars.tar.xz -C runtime/grammars/sources .

            - uses: actions/upload-artifact@v4
              with:
                  name: grammars
                  path: grammars.tar.xz

    dist:
        name: Dist
        needs: [set-env-vars, fetch-grammars]
        env:
            # For some builds, we use cross to test on 32-bit and big-endian
            # systems.
            CARGO: cargo
            # When CARGO is set to CROSS, this is set to `--target matrix.target`.
            TARGET_FLAGS:
            # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
            TARGET_DIR: ./target
            # Emit backtraces on panics.
            RUST_BACKTRACE: 1
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false # don't fail other jobs if one fails
            matrix:
                build: [x86_64-linux, aarch64-linux, x86_64-windows] #, x86_64-win-gnu, win32-msvc
                include:
                    - build: x86_64-linux
                      os: ubuntu-latest
                      rust: stable
                      target: x86_64-unknown-linux-gnu
                      cross: false
                      skip_tests: true
                    - build: aarch64-linux
                      os: ubuntu-latest
                      rust: stable
                      target: aarch64-unknown-linux-gnu
                      cross: true
                      skip_tests: true
                    - build: x86_64-windows
                      os: windows-latest
                      rust: stable
                      target: x86_64-pc-windows-msvc
                      cross: false
                      skip_tests: true

        steps:
            - name: Checkout sources
              uses: actions/checkout@v4
              with:
                  repository: "helix-editor/helix"

            - name: Download grammars
              uses: actions/download-artifact@v4

            - name: Move grammars under runtime
              if: ${{ !startsWith(matrix.os, 'windows') }}
              run: |
                  mkdir -p runtime/grammars/sources
                  tar xJf grammars/grammars.tar.xz -C runtime/grammars/sources

            # The rust-toolchain action ignores rust-toolchain.toml files.
            # Removing this before building with cargo ensures that the rust-toolchain
            # is considered the same between installation and usage.
            - name: Remove the rust-toolchain.toml file
              run: rm rust-toolchain.toml

            - name: Install ${{ matrix.rust }} toolchain
              uses: dtolnay/rust-toolchain@master
              with:
                  toolchain: ${{ matrix.rust }}
                  target: ${{ matrix.target }}

            # Install a pre-release version of Cross
            # TODO: We need to pre-install Cross because we need cross-rs/cross#591 to
            #       get a newer C++ compiler toolchain. Remove this step when Cross
            #       0.3.0, which includes cross-rs/cross#591, is released.
            - name: Install Cross
              if: ${{ matrix.cross }}
              run: |
                  cargo install cross --git https://github.com/cross-rs/cross.git --rev 47df5c76e7cba682823a0b6aa6d95c17b31ba63a
                  echo "CARGO=cross" >> $GITHUB_ENV
              # echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
              # echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

            - name: Show command used for Cargo
              run: |
                  echo "cargo command is: ${{ env.CARGO }}"
                  echo "target flag is: ${{ env.TARGET_FLAGS }}"

            - name: Run cargo test
              if: ${{ !matrix.skip_tests }}
              run: ${{ env.CARGO }} test --release --locked --target ${{ matrix.target }} --workspace

            - name: Set profile.release.strip = true
              shell: bash
              run: |
                  cat >> .cargo/config.toml <<EOF
                  [profile.release]
                  strip = true
                  EOF

            - name: Set version number
              shell: bash
              run: |
                  sed -i "s/^version = .*/version = \"${{ needs.set-env-vars.outputs.tag }}\"/" Cargo.toml

            - name: Build release binary
              run: ${{ env.CARGO }} build --release --locked --target ${{ matrix.target }}

            - name: Build archive
              shell: bash
              run: |
                  mkdir -p dist
                  if [ "${{ matrix.os }}" = "windows-2019" ]; then
                    cp "target/${{ matrix.target }}/release/hx.exe" "dist/"
                  else
                    cp "target/${{ matrix.target }}/release/hx" "dist/"
                  fi
                  if [ -d runtime/grammars/sources ]; then
                    rm -rf runtime/grammars/sources
                  fi
                  cp -r runtime dist

            - uses: actions/upload-artifact@v4
              with:
                  name: bins-${{ matrix.build }}
                  path: dist

    publish:
        name: Publish
        needs: [set-env-vars, dist]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout sources
              uses: actions/checkout@v4
              with:
                  repository: "helix-editor/helix"

            - uses: actions/download-artifact@v4

            - name: Build archive
              shell: bash
              run: |
                  set -ex

                  source="$(pwd)"
                  mkdir -p runtime/grammars/sources
                  tar xJf grammars/grammars.tar.xz -C runtime/grammars/sources
                  rm -rf grammars

                  cd "$(mktemp -d)"
                  mv $source/bins-* .
                  mkdir dist

                  for dir in bins-* ; do
                      platform=${dir#"bins-"}
                      if [[ $platform =~ "windows" ]]; then
                          exe=".exe"
                      fi
                      pkgname=helix-${{ needs.set-env-vars.outputs.tag }}-$platform
                      mkdir -p $pkgname
                      cp $source/LICENSE $source/README.md $pkgname
                      mkdir $pkgname/contrib
                      cp -r $source/contrib/completion $pkgname/contrib
                      mv bins-$platform/runtime $pkgname/
                      mv bins-$platform/hx$exe $pkgname
                      chmod +x $pkgname/hx$exe

                      if [[ "$platform" = "x86_64-linux" ]]; then
                          mv bins-$platform/helix-*.AppImage* dist/
                      fi

                      if [ "$exe" = "" ]; then
                          tar cJf dist/$pkgname.tar.xz $pkgname
                      else
                          7z a -r dist/$pkgname.zip $pkgname
                      fi
                  done

                  tar cJf dist/helix-${{ needs.set-env-vars.outputs.tag }}-source.tar.xz -C $source .
                  mv dist $source/

            - name: Upload binaries to release
              uses: svenstaro/upload-release-action@v2
              with:
                  file: dist/*
                  file_glob: true
                  tag: ${{ needs.set-env-vars.outputs.tag }}
                  overwrite: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload binaries as artifact
              uses: actions/upload-artifact@v4
              with:
                  name: release
                  path: dist/*
